// Комментарий 1: Инкапсуляция
// Все поля классов закрыты (protected или private), и доступ к ним осуществляется через методы классов.
// Внешние функции не имеют прямого доступа к данным классов.

// Комментарий 2: Наследование
// Есть три класса: MenuItem, Dish, Coffee, Drink, и SubMenu, где Dish, Coffee, и Drink наследуются от MenuItem.

// Комментарий 3: Полиморфизм
// В классе MenuItem есть виртуальная функция "action", которая переопределена в производных классах Dish, Coffee, Drink.
// Также, есть использование динамического полиморфизма при вызове метода "action" в main через указатели на базовый класс.

// Комментарий 4: Конструкторы, Перегрузка конструкторов
// У классов MenuItem, Dish, Coffee, Drink, и SubMenu есть конструкторы, а также перегрузка конструктора у класса Dish.

// Комментарий 5: Списки инициализации
// В конструкторах используются списки инициализации, например, в конструкторе Dish и Coffee.

// Комментарий 6: Указание на абстрактный класс
// Класс MenuItem содержит чисто виртуальную функцию "action", что делает его абстрактным классом.


// Комментарий 7: Включение необходимых заголовочных файлов
#include <iostream>
#include <vector>
#include <string>

// Комментарий 8: Использование стандартного пространства имен
using namespace std;

// Комментарий 9: Определение абстрактного класса MenuItem
class MenuItem {
public:
    // Комментарий 10: Конструктор класса MenuItem с инициализацией имени
    MenuItem(const string& name) : name(name) {}

    // Комментарий 11: Виртуальная функция для отображения элемента меню
    virtual void display() const {
        cout << "Элемент меню: " << name << endl;
    }

    // Комментарий 12: Чисто виртуальная функция для выполнения действия с элементом меню
    virtual void action() const = 0;

    // Комментарий 13: Виртуальный деструктор
    virtual ~MenuItem() = default;

// Комментарий 14: Защищенное поле данных - имя элемента меню
protected:
    string name;
};

// Комментарий 15: Класс Dish наследуется от абстрактного класса MenuItem
class Dish : public MenuItem {
public:
    // Комментарий 16: Конструктор класса Dish с инициализацией имени, цены и состава
    Dish(const string& name, float price, const string& composition)
        : MenuItem(name), price(price), composition(composition) {}

    // Комментарий 17: Переопределенная функция отображения для блюда
    void display() const override {
        cout << "Блюдо: " << name << " - Цена: " << price << " руб." << endl;
    }

    // Комментарий 18: Переопределенная функция выполнения действия для блюда
    void action() const override {
        // ... (вывод информации о блюде в зависимости от выбора пользователя)
    }

private:
    float price;
    string composition;
};

// Комментарий 19: Класс Coffee наследуется от абстрактного класса MenuItem
class Coffee : public MenuItem {
public:
    // Комментарий 20: Конструктор класса Coffee с инициализацией имени и цены
    Coffee(const string& name, float price) : MenuItem(name), price(price) {}

    // Комментарий 21: Переопределенная функция отображения для кофе
    void display() const override {
        cout << "Кофе: " << name << " - Цена: " << price << " руб." << endl;
    }

    // Комментарий 22: Переопределенная функция выполнения действия для кофе
    void action() const override {
        // ... (вывод информации о выбранном виде кофе)
    }

private:
    float price;
    string coffeeType;
    string composition;

    // Комментарий 23: Вспомогательная функция для вывода деталей о виде кофе
    void showCoffeeDetails(const string& coffeeType, const string& composition, float coffeePrice) const {
        // ... (вывод информации о виде кофе)
    }
};

// Комментарий 24: Класс Drink наследуется от абстрактного класса MenuItem
class Drink : public MenuItem {
public:
    // Комментарий 25: Конструктор класса Drink с инициализацией имени, цены и состава
    Drink(const string& name, float price, const string& composition)
        : MenuItem(name), price(price), composition(composition) {}

    // Комментарий 26: Переопределенная функция отображения для напитка
    void display() const override {
        cout << "Напиток: " << name << " - Цена: " << price << " руб." << endl;
    }

    // Комментарий 27: Переопределенная функция выполнения действия для напитка
    void action() const override {
        // ... (вывод информации о напитке в зависимости от выбора пользователя)
    }

private:
    float price;
    string composition;
};

// Комментарий 28: Класс SubMenu наследуется от абстрактного класса MenuItem
class SubMenu : public MenuItem {
public:
    // Комментарий 29: Конструктор класса SubMenu с инициализацией имени
    SubMenu(const string& name) : MenuItem(name) {}

    // Комментарий 30: Переопределенная функция отображения для подменю
    void display() const override {
        cout << "Подменю: " << name << endl;
    }

    // Комментарий 31: Функция для добавления элемента меню в подменю
    void addMenuItem(MenuItem* item) {
        items.push_back(item);
    }

    // Комментарий 32: Переопределенная функция выполнения действия для подменю
    void action() const override {
        // ... (обработка выбора пользователя и вызов соответствующего действия элемента меню)
    }

    // Комментарий 33: Деструктор класса SubMenu
    ~SubMenu() override {
        try {
            for (const auto& item : items) {
                delete item;
            }
        } catch (const std::bad_alloc& e) {
            // Обработка исключения bad_alloc при удалении объекта в SubMenu
            std::cerr << "Исключение bad_alloc при удалении объекта в SubMenu: " << e.what() << std::endl;
        } catch (const std::exception& e) {
            // Обработка других исключений при удалении объекта в SubMenu
            std::cerr << "Другое исключение при удалении объекта в SubMenu: " << e.what() << std::endl;
        } catch (...) {
            // Обработка неизвестного исключения при удалении объекта в SubMenu
            std::cerr << "Неизвестное исключение при удалении объекта в SubMenu" << std::endl;
        }
    }

private:
    // Комментарий 34: Вектор для хранения элементов меню в подменю
    vector<MenuItem*> items;
};

// Комментарий 35: Основная функция main
int main() {
    // Комментарий 36: Создание объекта класса SubMenu - главного меню
    SubMenu mainMenu("Главное меню");

    // Комментарий 37-47: Создание объектов классов Dish, Coffee, Drink и добавление их в главное меню
    // (Это заполняет главное меню различными блюдами, напитками и кофе)
    // Далее, вызов функции action для отображения и взаимодействия с меню.

    return 0;
}
